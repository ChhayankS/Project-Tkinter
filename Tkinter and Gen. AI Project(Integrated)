{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "205693ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tkinter Project\n",
    "\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox, ttk, filedialog, scrolledtext\n",
    "import cv2\n",
    "import boto3\n",
    "from botocore.exceptions import NoCredentialsError\n",
    "from email.message import EmailMessage\n",
    "import ssl\n",
    "import smtplib\n",
    "import socket\n",
    "import requests\n",
    "from googlesearch import search\n",
    "\n",
    "# AWS Configurations (Replace with your actual credentials)\n",
    "aws_access_key_id = 'Enter your AWS Access Key ID'\n",
    "aws_secret_access_key = 'Enter your AWS Secret Access Key'\n",
    "region_name = 'Enter your Region name'\n",
    "\n",
    "# Mappls API key (Replace with your actual Mappls API key)\n",
    "API_KEY = \"Enter your API key\"\n",
    "\n",
    "# Initialize Boto3 clients\n",
    "ec2 = boto3.client(\n",
    "    'ec2',\n",
    "    aws_access_key_id=aws_access_key_id,\n",
    "    aws_secret_access_key=aws_secret_access_key,\n",
    "    region_name=region_name\n",
    ")\n",
    "\n",
    "s3 = boto3.client(\n",
    "    's3',\n",
    "    aws_access_key_id=aws_access_key_id,\n",
    "    aws_secret_access_key=aws_secret_access_key,\n",
    "    region_name=region_name\n",
    ")\n",
    "\n",
    "def open_camera():\n",
    "    \"\"\" Opens a camera feed using OpenCV. \"\"\"\n",
    "    cap = cv2.VideoCapture(0)\n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            messagebox.showerror(\"Error\", \"Unable to read frame.\")\n",
    "            break\n",
    "        cv2.imshow('Original', frame)\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "    cap.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "def apply_sketch(frame):\n",
    "    \"\"\" Applies a sketch effect to a video frame. \"\"\"\n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    inverted_gray_frame = 255 - gray_frame\n",
    "    blurred_frame = cv2.GaussianBlur(inverted_gray_frame, (21, 21), 0)\n",
    "    inverted_blurred_frame = 255 - blurred_frame\n",
    "    sketch = cv2.divide(gray_frame, inverted_blurred_frame, scale=256.0)\n",
    "    return sketch\n",
    "\n",
    "def open_camera_with_sketch():\n",
    "    \"\"\" Opens a camera feed with a sketch effect using OpenCV. \"\"\"\n",
    "    cap = cv2.VideoCapture(0)\n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            messagebox.showerror(\"Error\", \"Unable to read frame.\")\n",
    "            break\n",
    "        sketch = apply_sketch(frame)\n",
    "        cv2.imshow('Sketch Effect', sketch)\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "    cap.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "def update_instance_status():\n",
    "    \"\"\" Updates the status of EC2 instances and displays control buttons. \"\"\"\n",
    "    instances = ec2.describe_instances()\n",
    "    for widget in ec2_frame.winfo_children():\n",
    "        widget.destroy()\n",
    "\n",
    "    for reservation in instances['Reservations']:\n",
    "        for instance in reservation['Instances']:\n",
    "            instance_id = instance['InstanceId']\n",
    "            instance_state = instance['State']['Name']\n",
    "            row = tk.Frame(ec2_frame)\n",
    "            row.pack(fill='x')\n",
    "            tk.Label(row, text=f\"{instance_id} - {instance_state}\", width=30).pack(side='left')\n",
    "            if instance_state == \"running\":\n",
    "                action_button = tk.Button(row, text=\"Stop\", command=lambda id=instance_id: stop_instance(id))\n",
    "                action_button.pack(side='right')\n",
    "            else:\n",
    "                action_button = tk.Button(row, text=\"Start\", command=lambda id=instance_id: start_instance(id))\n",
    "                action_button.pack(side='right')\n",
    "\n",
    "def start_instance(instance_id):\n",
    "    \"\"\" Starts an EC2 instance by instance ID. \"\"\"\n",
    "    ec2.start_instances(InstanceIds=[instance_id])\n",
    "    messagebox.showinfo(\"Instance Starting\", f\"Instance {instance_id} is being started.\")\n",
    "    update_instance_status()\n",
    "\n",
    "def stop_instance(instance_id):\n",
    "    \"\"\" Stops an EC2 instance by instance ID. \"\"\"\n",
    "    ec2.stop_instances(InstanceIds=[instance_id])\n",
    "    messagebox.showinfo(\"Instance Stopping\", f\"Instance {instance_id} is being stopped.\")\n",
    "    update_instance_status()\n",
    "\n",
    "def list_buckets():\n",
    "    \"\"\" Lists all S3 buckets in the AWS account. \"\"\"\n",
    "    buckets = s3.list_buckets()\n",
    "    bucket_listbox.delete(0, tk.END)\n",
    "    for bucket in buckets['Buckets']:\n",
    "        bucket_listbox.insert(tk.END, bucket['Name'])\n",
    "\n",
    "def list_files():\n",
    "    \"\"\" Lists files in the selected S3 bucket. \"\"\"\n",
    "    selected_bucket = bucket_listbox.get(tk.ANCHOR)\n",
    "    if selected_bucket:\n",
    "        objects = s3.list_objects(Bucket=selected_bucket)\n",
    "        file_listbox.delete(0, tk.END)\n",
    "        if 'Contents' in objects:\n",
    "            for obj in objects['Contents']:\n",
    "                file_listbox.insert(tk.END, obj['Key'])\n",
    "\n",
    "def upload_file():\n",
    "    \"\"\" Uploads a file to the selected S3 bucket. \"\"\"\n",
    "    selected_bucket = bucket_listbox.get(tk.ANCHOR)\n",
    "    if selected_bucket:\n",
    "        filepath = filedialog.askopenfilename()\n",
    "        if filepath:\n",
    "            filename = filepath.split('/')[-1]\n",
    "            with open(filepath, 'rb') as file_data:\n",
    "                s3.upload_fileobj(file_data, selected_bucket, filename)\n",
    "            list_files()\n",
    "            messagebox.showinfo(\"Upload Successful\", f\"Uploaded {filename} to {selected_bucket}\")\n",
    "\n",
    "def delete_file():\n",
    "    \"\"\" Deletes a file from the selected S3 bucket. \"\"\"\n",
    "    selected_bucket = bucket_listbox.get(tk.ANCHOR)\n",
    "    selected_file = file_listbox.get(tk.ANCHOR)\n",
    "    if selected_bucket and selected_file:\n",
    "        s3.delete_object(Bucket=selected_bucket, Key=selected_file)\n",
    "        list_files()\n",
    "        messagebox.showinfo(\"Delete Successful\", f\"Deleted {selected_file} from {selected_bucket}\")\n",
    "\n",
    "def get_current_location():\n",
    "    \"\"\" Retrieves the current location using geolocation API. \"\"\"\n",
    "    try:\n",
    "        response = requests.get(\"https://api.geolocation.com/v1/location\")\n",
    "        location_data = response.json()\n",
    "        latitude = location_data.get(\"latitude\")\n",
    "        longitude = location_data.get(\"longitude\")\n",
    "        return latitude, longitude\n",
    "    except Exception as e:\n",
    "        messagebox.showerror(\"Error\", f\"Error getting location: {e}\")\n",
    "        return None, None\n",
    "\n",
    "def reverse_geocode(latitude, longitude):\n",
    "    \"\"\" Reverse geocodes the coordinates to get address using Mappls API. \"\"\"\n",
    "    url = f\"https://apis.mappls.com/advancedmaps/v1/{API_KEY}/rev_geocode?lat={latitude}&lng={longitude}\"\n",
    "    response = requests.get(url)\n",
    "    data = response.json()\n",
    "    if response.status_code == 200:\n",
    "        address = data.get(\"results\")[0].get(\"formatted_address\")\n",
    "        return address\n",
    "    else:\n",
    "        messagebox.showerror(\"Error\", f\"Error getting address: {response.text}\")\n",
    "        return None\n",
    "\n",
    "def get_location():\n",
    "    \"\"\" Retrieves and displays the current location. \"\"\"\n",
    "    latitude, longitude = get_current_location()\n",
    "    if latitude and longitude:\n",
    "        address = reverse_geocode(latitude, longitude)\n",
    "        if address:\n",
    "            location_label.config(text=f\"Your current location is: {address}\")\n",
    "        else:\n",
    "            location_label.config(text=\"Failed to get address from Mappls API\")\n",
    "    else:\n",
    "        location_label.config(text=\"Failed to get current location\")\n",
    "\n",
    "def send_email():\n",
    "    \"\"\" Sends an email using SMTP. \"\"\"\n",
    "    try:\n",
    "        email_sender = sender_entry.get()\n",
    "        email_password = password_entry.get()\n",
    "        email_receiver = receiver_entry.get()\n",
    "        subject = subject_entry.get()\n",
    "        body = body_text.get(\"1.0\", tk.END)\n",
    "\n",
    "        em = EmailMessage()\n",
    "        em['From'] = email_sender\n",
    "        em['To'] = email_receiver\n",
    "        em['Subject'] = subject\n",
    "        em.set_content(body)\n",
    "\n",
    "        context = ssl.create_default_context()\n",
    "        with smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as smtp:\n",
    "            smtp.login(email_sender, email_password)\n",
    "            smtp.sendmail(email_sender, email_receiver, em.as_string())\n",
    "        \n",
    "        messagebox.showinfo(\"Success\", \"Email sent successfully!\")\n",
    "    except Exception as e:\n",
    "        messagebox.showerror(\"Error\", f\"Failed to send email: {str(e)}\")\n",
    "\n",
    "def check_server(ip_address, port):\n",
    "    \"\"\" Checks if a server is running on the specified IP address and port. \"\"\"\n",
    "    s = socket.socket()\n",
    "    s.settimeout(1)\n",
    "    try:\n",
    "        s.connect((ip_address, port))\n",
    "        return True\n",
    "    except socket.error:\n",
    "        return False\n",
    "    finally:\n",
    "        s.close()\n",
    "\n",
    "def check_ports(ip_address):\n",
    "    \"\"\" Checks common ports on a specified IP address. \"\"\"\n",
    "    ports = [80, 443, 22, 21, 25, 53, 110, 143, 3306]\n",
    "    results = []\n",
    "    for port in ports:\n",
    "        if check_server(ip_address, port):\n",
    "            results.append(f\"Server is running on {ip_address}:{port}\")\n",
    "        else:\n",
    "            results.append(f\"Server is NOT running on {ip_address}:{port}\")\n",
    "    return results\n",
    "\n",
    "def check_server_status():\n",
    "    \"\"\" Retrieves server status for a specified IP address. \"\"\"\n",
    "    ip_address = ip_entry.get()\n",
    "    if not ip_address:\n",
    "        messagebox.showwarning(\"Warning\", \"Please enter an IP address.\")\n",
    "        return\n",
    "    \n",
    "    results = check_ports(ip_address)\n",
    "    result_text.config(state=tk.NORMAL)\n",
    "    result_text.delete(1.0, tk.END)\n",
    "    for result in results:\n",
    "        result_text.insert(tk.END, result + \"\\n\")\n",
    "    result_text.config(state=tk.DISABLED)\n",
    "\n",
    "def get_wikipedia_summary(search_term):\n",
    "    \"\"\" Fetches the summary of a Wikipedia page for a given search term. \"\"\"\n",
    "    url = \"https://en.wikipedia.org/w/api.php\"\n",
    "    params = {\n",
    "        \"action\": \"query\",\n",
    "        \"format\": \"json\",\n",
    "        \"titles\": search_term,\n",
    "        \"prop\": \"extracts\",\n",
    "        \"exintro\": True,\n",
    "        \"explaintext\": True\n",
    "    }\n",
    "    \n",
    "    response = requests.get(url, params=params)\n",
    "    \n",
    "    if response.status_code != 200:\n",
    "        return \"Error: Unable to fetch data from Wikipedia.\"\n",
    "    \n",
    "    data = response.json()\n",
    "    \n",
    "    pages = data[\"query\"][\"pages\"]\n",
    "    for page_id, page in pages.items():\n",
    "        if page_id == \"-1\":\n",
    "            return \"No page found for the given search term.\"\n",
    "        if \"extract\" in page:\n",
    "            return page[\"extract\"]\n",
    "        else:\n",
    "            return \"No summary available for this page.\"\n",
    "\n",
    "def search_google(search_term):\n",
    "    \"\"\" Fetches the top 5 Google search results for a given search term. \"\"\"\n",
    "    results = []\n",
    "    try:\n",
    "        for result in search(search_term, num=5, stop=5):\n",
    "            results.append(result)\n",
    "    except Exception as e:\n",
    "        results.append(f\"Error: {str(e)}\")\n",
    "    return results\n",
    "\n",
    "def search_wikipedia_and_google():\n",
    "    \"\"\" Performs a Wikipedia search and displays the summary and Google search results. \"\"\"\n",
    "    search_term = search_entry.get()\n",
    "    \n",
    "    # Fetch Wikipedia summary\n",
    "    summary = get_wikipedia_summary(search_term)\n",
    "    wiki_result.config(state=tk.NORMAL)\n",
    "    wiki_result.delete(1.0, tk.END)\n",
    "    wiki_result.insert(tk.END, summary)\n",
    "    wiki_result.config(state=tk.DISABLED)\n",
    "    \n",
    "    # Fetch Google top results\n",
    "    google_results = search_google(search_term)\n",
    "    top_results_text.config(state=tk.NORMAL)\n",
    "    top_results_text.delete(1.0, tk.END)\n",
    "    for result in google_results:\n",
    "        top_results_text.insert(tk.END, result + \"\\n\\n\")\n",
    "    top_results_text.config(state=tk.DISABLED)\n",
    "\n",
    "# Create the main window\n",
    "root = tk.Tk()\n",
    "root.title(\"Multi-Function Tool\")\n",
    "\n",
    "# Set up tabs for different functionalities\n",
    "notebook = ttk.Notebook(root)\n",
    "notebook.pack(fill=tk.BOTH, expand=True)\n",
    "\n",
    "# Tab 1: AWS S3 Operations\n",
    "s3_frame = ttk.Frame(notebook)\n",
    "notebook.add(s3_frame, text='AWS S3')\n",
    "\n",
    "bucket_frame = tk.LabelFrame(s3_frame, text=\"Buckets\")\n",
    "bucket_frame.pack(padx=10, pady=5, fill=\"both\", expand=True)\n",
    "bucket_listbox = tk.Listbox(bucket_frame)\n",
    "bucket_listbox.pack(padx=5, pady=5, fill=\"both\", expand=True)\n",
    "\n",
    "file_frame = tk.LabelFrame(s3_frame, text=\"Files in Selected Bucket\")\n",
    "file_frame.pack(padx=10, pady=5, fill=\"both\", expand=True)\n",
    "file_listbox = tk.Listbox(file_frame)\n",
    "file_listbox.pack(padx=5, pady=5, fill=\"both\", expand=True)\n",
    "\n",
    "button_frame_s3 = tk.Frame(s3_frame)\n",
    "button_frame_s3.pack(padx=10, pady=5, fill=\"x\", expand=True)\n",
    "list_bucket_button = tk.Button(button_frame_s3, text=\"List Buckets\", command=list_buckets)\n",
    "list_bucket_button.pack(side=\"left\", expand=True)\n",
    "upload_button = tk.Button(button_frame_s3, text=\"Upload File\", command=upload_file)\n",
    "upload_button.pack(side=\"left\", expand=True)\n",
    "delete_button = tk.Button(button_frame_s3, text=\"Delete File\", command=delete_file)\n",
    "delete_button.pack(side=\"left\", expand=True)\n",
    "\n",
    "# Tab 2: Server Status Check\n",
    "server_frame = ttk.Frame(notebook)\n",
    "notebook.add(server_frame, text='Server Status')\n",
    "\n",
    "ip_label = tk.Label(server_frame, text=\"Enter IP Address:\")\n",
    "ip_label.pack(pady=5)\n",
    "ip_entry = tk.Entry(server_frame, width=50)\n",
    "ip_entry.pack(pady=5)\n",
    "\n",
    "check_button = tk.Button(server_frame, text=\"Check Server\", command=check_server_status)\n",
    "check_button.pack(pady=10)\n",
    "\n",
    "result_text = tk.Text(server_frame, height=10, width=60, state=tk.DISABLED)\n",
    "result_text.pack(pady=10)\n",
    "\n",
    "# Tab 3: Location Finder\n",
    "location_frame = ttk.Frame(notebook)\n",
    "notebook.add(location_frame, text='Location')\n",
    "\n",
    "location_label = tk.Label(location_frame, text=\"Click the button to get your current location\")\n",
    "location_label.pack(pady=20)\n",
    "\n",
    "get_location_button = tk.Button(location_frame, text=\"Get Location\", command=get_location)\n",
    "get_location_button.pack(pady=10)\n",
    "\n",
    "# Tab 4: Email Sender\n",
    "email_frame = ttk.Frame(notebook)\n",
    "notebook.add(email_frame, text='Email Sender')\n",
    "\n",
    "sender_label = tk.Label(email_frame, text=\"Sender Email:\")\n",
    "sender_label.pack(pady=5)\n",
    "sender_entry = tk.Entry(email_frame, width=50)\n",
    "sender_entry.pack(pady=5)\n",
    "\n",
    "password_label = tk.Label(email_frame, text=\"Sender Password:\")\n",
    "password_label.pack(pady=5)\n",
    "password_entry = tk.Entry(email_frame, show='*', width=50)\n",
    "password_entry.pack(pady=5)\n",
    "\n",
    "receiver_label = tk.Label(email_frame, text=\"Receiver Email:\")\n",
    "receiver_label.pack(pady=5)\n",
    "receiver_entry = tk.Entry(email_frame, width=50)\n",
    "receiver_entry.pack(pady=5)\n",
    "\n",
    "subject_label = tk.Label(email_frame, text=\"Subject:\")\n",
    "subject_label.pack(pady=5)\n",
    "subject_entry = tk.Entry(email_frame, width=50)\n",
    "subject_entry.pack(pady=5)\n",
    "\n",
    "body_label = tk.Label(email_frame, text=\"Body:\")\n",
    "body_label.pack(pady=5)\n",
    "body_text = tk.Text(email_frame, height=10, width=50)\n",
    "body_text.pack(pady=5)\n",
    "\n",
    "send_button = tk.Button(email_frame, text=\"Send Email\", command=send_email)\n",
    "send_button.pack(pady=10)\n",
    "\n",
    "# Tab 5: Wikipedia and Google Search\n",
    "search_frame = ttk.Frame(notebook)\n",
    "notebook.add(search_frame, text='Search')\n",
    "\n",
    "input_frame = tk.Frame(search_frame, padx=20, pady=20)\n",
    "input_frame.pack(side=tk.TOP, fill=tk.X)\n",
    "\n",
    "tk.Label(input_frame, text=\"Enter a search term:\", font=(\"Arial\", 14)).pack(side=tk.LEFT, padx=10)\n",
    "search_entry = tk.Entry(input_frame, width=50, font=(\"Arial\", 14))\n",
    "search_entry.pack(side=tk.LEFT, padx=10)\n",
    "search_button = tk.Button(input_frame, text=\"Search\", command=search_wikipedia_and_google, font=(\"Arial\", 14))\n",
    "search_button.pack(side=tk.LEFT, padx=10)\n",
    "\n",
    "top_results_frame = tk.Frame(search_frame, padx=20, pady=20)\n",
    "top_results_frame.pack(side=tk.TOP, fill=tk.X)\n",
    "\n",
    "tk.Label(top_results_frame, text=\"Top Google Results:\", font=(\"Arial\", 14)).pack(pady=10)\n",
    "top_results_text = scrolledtext.ScrolledText(top_results_frame, wrap=tk.WORD, font=(\"Arial\", 12), height=10, state=tk.DISABLED)\n",
    "top_results_text.pack(pady=10, fill=tk.X)\n",
    "\n",
    "wiki_result_frame = tk.Frame(search_frame, padx=20, pady=20)\n",
    "wiki_result_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)\n",
    "\n",
    "tk.Label(wiki_result_frame, text=\"Wikipedia Summary:\", font=(\"Arial\", 14)).pack(pady=10)\n",
    "wiki_result = scrolledtext.ScrolledText(wiki_result_frame, wrap=tk.WORD, font=(\"Arial\", 12), state=tk.DISABLED)\n",
    "wiki_result.pack(pady=10, fill=tk.BOTH, expand=True)\n",
    "\n",
    "# Tab 6: OpenCV Camera\n",
    "camera_frame = ttk.Frame(notebook)\n",
    "notebook.add(camera_frame, text='Camera')\n",
    "\n",
    "camera_button_frame = tk.Frame(camera_frame)\n",
    "camera_button_frame.pack(pady=10)\n",
    "\n",
    "open_camera_button = tk.Button(camera_button_frame, text=\"Open Camera\", command=open_camera)\n",
    "open_camera_button.pack(side=tk.LEFT, padx=10)\n",
    "\n",
    "sketch_camera_button = tk.Button(camera_button_frame, text=\"Open Camera with Sketch\", command=open_camera_with_sketch)\n",
    "sketch_camera_button.pack(side=tk.LEFT, padx=10)\n",
    "\n",
    "# Tab 7: EC2 Instances\n",
    "ec2_frame = ttk.Frame(notebook)\n",
    "notebook.add(ec2_frame, text='EC2 Instances')\n",
    "\n",
    "update_instance_status()\n",
    "\n",
    "# Run the application\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04d7d37c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generative AI project\n",
    "\n",
    "import tkinter as tk\n",
    "from tkinter import scrolledtext, messagebox\n",
    "import cohere\n",
    "\n",
    "# Initialize the Cohere client\n",
    "cohere_api_key = 'Enter your Cohere API key'\n",
    "cohere_client = cohere.Client(api_key=cohere_api_key)\n",
    "\n",
    "# Set up a simple in-memory cache using a dictionary\n",
    "cache = {}\n",
    "\n",
    "# Define a function to generate text using Cohere\n",
    "def generate_text(prompt, max_tokens=50):\n",
    "    # Check if the prompt is already cached\n",
    "    if prompt in cache:\n",
    "        return cache[prompt]\n",
    "    \n",
    "    # If not cached, generate text using Cohere\n",
    "    response = cohere_client.generate(\n",
    "        model='command-xlarge-nightly',\n",
    "        prompt=prompt,\n",
    "        max_tokens=max_tokens\n",
    "    )\n",
    "    generated_text = response.generations[0].text.strip()\n",
    "\n",
    "    # Cache the response\n",
    "    cache[prompt] = generated_text\n",
    "    \n",
    "    return generated_text\n",
    "\n",
    "# Define the function to be called when the \"Generate Text\" button is clicked\n",
    "def on_generate_text():\n",
    "    prompt = prompt_entry.get()\n",
    "    if not prompt:\n",
    "        messagebox.showwarning(\"Warning\", \"Please enter a prompt.\")\n",
    "        return\n",
    "    \n",
    "    generated_text = generate_text(prompt)\n",
    "    result_text.config(state=tk.NORMAL)\n",
    "    result_text.delete(1.0, tk.END)\n",
    "    result_text.insert(tk.END, generated_text)\n",
    "    result_text.config(state=tk.DISABLED)\n",
    "\n",
    "# Create the main window\n",
    "root = tk.Tk()\n",
    "root.title(\"Cohere Text Generator\")\n",
    "\n",
    "# Create and place the prompt entry\n",
    "tk.Label(root, text=\"Enter your prompt:\").pack(pady=10)\n",
    "prompt_entry = tk.Entry(root, width=50)\n",
    "prompt_entry.pack(pady=10)\n",
    "\n",
    "# Create and place the generate button\n",
    "generate_button = tk.Button(root, text=\"Generate Text\", command=on_generate_text)\n",
    "generate_button.pack(pady=10)\n",
    "\n",
    "# Create and place the result text area\n",
    "tk.Label(root, text=\"Generated Text:\").pack(pady=10)\n",
    "result_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=60, height=20, state=tk.DISABLED)\n",
    "result_text.pack(pady=10)\n",
    "\n",
    "# Run the application\n",
    "root.mainloop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
